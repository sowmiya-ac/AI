# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nzIvASX7LyvcLcIioBLNCy1it-dbKGyn
"""



# Install dependencies
!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# --------------------------
# 1. Load model and tokenizer
# --------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"  # Instruction-tuned model
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# --------------------------
# 2. Generate Response
# --------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# --------------------------
# 3. Health Analysis Function
# --------------------------
def health_analysis(city_name):
    prompt = f"Provide a detailed health and wellness report for {city_name}, including:\n1. Common health issues and statistics\n2. Wellness programs and facilities\n3. Overall health assessment and recommendations\n\nCity: {city_name}\nReport:"
    return generate_response(prompt, max_length=1000)

# --------------------------
# 4. Citizen Health Query Function
# --------------------------
def health_citizen_query(query):
    prompt = f"As a government health assistant, provide accurate and helpful advice regarding public health, wellness programs, or health policies for the following query:\n\nQuery: {query}\nResponse:"
    return generate_response(prompt, max_length=1000)

# --------------------------
# 5. Build Gradio App
# --------------------------
with gr.Blocks() as app:
    gr.Markdown("# Health & Wellness Advisory AI")

    with gr.Tabs():
        # Tab 1: Health Analysis
        with gr.TabItem("Health Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("Analyze Health")

                with gr.Column():
                    city_output = gr.Textbox(label="Health Analysis Report", lines=15)

            analyze_btn.click(health_analysis, inputs=city_input, outputs=city_output)

        # Tab 2: Citizen Health Queries
        with gr.TabItem("Citizen Health Queries"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Your Health Question",
                        placeholder="Ask about public health, wellness programs, or policies...",
                        lines=4
                    )
                    query_btn = gr.Button("Get Health Advice")

                with gr.Column():
                    citizen_output = gr.Textbox(label="Government Health Response", lines=15)

            query_btn.click(health_citizen_query, inputs=citizen_query, outputs=citizen_output)

# --------------------------
# 6. Launch App
# --------------------------
app.launch(share=True)